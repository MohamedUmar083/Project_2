/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2023-12-22 17:41:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String id = request.getParameter("id");
String driver = "com.mysql.jdbc.Driver";
String connectionUrl = "jdbc:mysql://localhost:3306/";
String database = "railwayproject";
String userid = "root";
String password = "Mohdumar@1011302";
try {
Class.forName(driver);
} catch (ClassNotFoundException e) {
e.printStackTrace();
}
Connection connection = null;
Statement statement = null;
ResultSet resultSet = null;

      out.write('\r');
      out.write('\n');

try{
connection = DriverManager.getConnection(connectionUrl+database, userid, password);
statement=connection.createStatement();
String sql ="select * from trains where id="+id;
resultSet = statement.executeQuery(sql);
while(resultSet.next()){

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>Update Train Status</h1>\r\n");
      out.write("<form method=\"post\" action=\"update-process.jsp\">\r\n");
      out.write("<input type=\"hidden\" name=\"id\" value=\"");
      out.print(resultSet.getString("id") );
      out.write("\">\r\n");
      out.write("<input type=\"text\" name=\"id\" value=\"");
      out.print(resultSet.getString("id") );
      out.write("\" readonly>\r\n");
      out.write("<br>\r\n");
      out.write("<label for=\"trainName\">Train Name:</label>\r\n");
      out.write("        <input type=\"text\" id=\"trainName\" name=\"trainName\" value=\"");
      out.print(resultSet.getString("train_name") );
      out.write("\" required><br>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"crossingStatus\">Crossing Status:</label>\r\n");
      out.write("        <input type=\"radio\" id=\"openStatus\" name=\"crossingStatus\" value=\"Open\"");
 if ("Open".equals(resultSet.getString("crossing_status"))) { 
      out.write("checked");
 } 
      out.write(">\r\n");
      out.write("        <label for=\"openStatus\">Open</label>\r\n");
      out.write("\r\n");
      out.write("        <input type=\"radio\" id=\"closedStatus\" name=\"crossingStatus\" value=\"Closed\"");
 if ("Closed".equals(resultSet.getString("crossing_status"))) { 
      out.write("checked");
 } 
      out.write(">\r\n");
      out.write("        <label for=\"closedStatus\">Closed</label><br>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"personInCharge\">Person in Charge:</label>\r\n");
      out.write("        <input type=\"text\" id=\"personInCharge\" name=\"personInCharge\" value=\"");
      out.print(resultSet.getString("person_in_Charge") );
      out.write("\"  required><br>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"trainSchedule\">Train Schedule:</label>\r\n");
      out.write("        <input type=\"text\" id=\"trainSchedule\" name=\"trainSchedule\" value=\"");
      out.print(resultSet.getString("train_schedule") );
      out.write("\"required><br>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"landmark\">Landmark:</label>\r\n");
      out.write("        <input type=\"text\" id=\"landmark\" name=\"landmark\" value=\"");
      out.print(resultSet.getString("landmark") );
      out.write("\" required><br>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"address\">Address:</label>\r\n");
      out.write("        <input type=\"text\" id=\"address\" name=\"address\" value=\"");
      out.print(resultSet.getString("address") );
      out.write("\" required><br>\r\n");
      out.write("<input type=\"submit\" value=\"Update\">\r\n");
      out.write("</form>\r\n");

}
connection.close();
} catch (Exception e) {
e.printStackTrace();
}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
